name: ci

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  FRB_MAIN_DART_VERSION: 3.5.1
  FRB_MAIN_FLUTTER_VERSION: 3.24.1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.FRB_MAIN_DART_VERSION }}
          architecture: x64
      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FRB_MAIN_FLUTTER_VERSION }}
      - name: Install dependencies
        run: flutter pub get
      - name: Analyze project source
        run: dart analyze
      - name: Run tests
        run: flutter test --coverage

  build-android:
    name: Build ${{ matrix.package }} Android on ${{ matrix.os }} and Flutter ${{ matrix.flutter }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        flutter: ["3.24.1"]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          distribution: "zulu" # OpenJDK
          java-version: "17"
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter }}
      - name: Build Android
        run: flutter build apk --flavor prod lib/main_prod.dart 
        working-directory: lib

  build-ios:
   name: Build ${{ matrix.package }} iOS on ${{ matrix.os }} with Xcode ${{ matrix.xcode }} and Flutter ${{ matrix.flutter }}
   runs-on: ${{ matrix.os }}
   strategy:
     matrix:
       os: [macos-14]
       xcode: ["15.4"]
       flutter: ["3.24.1"]
       exclude:
         - os: macos-13
           xcode: 14.3.1
   steps:
     - uses: actions/checkout@v1
     - name: Install the Apple certificate and provisioning profile
       env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
       run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
     - uses: actions/setup-java@v1
       with:
         java-version: "12.x"
     - name: Xcode select
       run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
     - uses: subosito/flutter-action@v2
       with:
         flutter-version: ${{ matrix.flutter }}
     - name: Flutter doctor (version check)
       run: flutter doctor
     - name: Build iOS
       run: flutter build ipa --flavor prod lib/main_prod.dart --export-method development
       working-directory: lib
       env:
         OTHER_SWIFT_FLAGS: "-warnings-as-errors"
         DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
